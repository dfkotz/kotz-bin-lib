#!/bin/sh
#
# photos-backup:
#   Backup photo collection to a drive/folder specified as the first argument.
#
# About others, see https://www.lightroomqueen.com/backup-lightroom-files/

function usage() {
    echo "usage: $0:t destination-directory { older | newer | other }..."
}

function backupOlder() {
    echo ""; echo "====================================-"
    echo Clone the older photos, for recovery purposes
    clone="$dest/photos-older-clone"
    if "$bin/photos-backup-clone" "$olderPhotos" "$clone" ; then
        echo >>"$clone/BACKUP" "cloned from $olderPhotos on" `date`
    else
        echo >>$errors " photos-backup-clone (older) FAILED"
    fi
}

function backupNewer() {
    echo ""; echo "====================================-"
    echo Clone the newer photos, for recovery purposes
    clone="$dest/photos-newer-clone"
    if "$bin/photos-backup-clone" "$newerPhotos" "$clone" ; then
	echo >>"$clone/BACKUP" "cloned from $newerPhotos on" `date`
    else
	echo >>$errors " photos-backup-clone (newer) FAILED"
    fi
}

function backupOther() {
    echo ""; echo "====================================-"
    echo Back up other material
    for from in "$plugins" "$support1" "$support2" "$support3"
    do
        echo ""; echo backup \""$from"\"
        to="$dest/$from"
        mkdir -p "$to" && \
            (cd && rsync -avHO --exclude .DS_Store "$from/" "$to/")
    done
}

function cleanup() {
    if [ -s $errors ]; then
        echo ""; echo "=============================="
        echo SOMETHING FAILED:
        cat $errors
        rm -f $errors
        exit 1
    else
        rm -f $errors
        exit 0
    fi
}

###################################################################
# main program

# handle arguments
if [ $# -lt 2 ]; then usage; exit 1; fi

# pull off first parameter as the destination 
dest="$1"
shift
if [ ! -d "$dest" ]; then
    echo "missing destination directory $dest"
    usage
    exit 2
fi

echo "backup $@ to $dest"

# set up
self=`which photos-backup`
bin="${self%/*}"
errors=/tmp/photos-backup
cat > $errors < /dev/null
trap cleanup sigint
trap exit ERR

# photo directories
newerPhotos=~/Personal/Photos/Lightroom
olderPhotos=~/Lightroom
# other things (relative to ~)
plugins=Personal/Photos/Lightroom/Plug-ins 
support1=Library/Application\ Support/Adobe/Lightroom 
support2=Library/Application\ Support/Adobe/CameraRaw
support3=Library/Preferences/com.adobe.LightroomClassicCC*.plist

# check the source locations
for source in "$newerPhotos" "$olderPhotos" ~/"$plugins" ~/"$support1" ~/"$support2" ~/"$support3"
do
    if [ ! -d "$source" ]; then
        echo "missing source directory $source"
        usage
        exit 3
    fi
done

# loop over arguments to backup the desired pieces
for piece in "$@"
do  case "$piece" in
    "older" ) backupOlder;;
    "newer" ) backupNewer;;
    "other" ) backupOther;;
    "others") backupOther;;
    *       ) echo ""; echo "unknown option $piece";;
    esac
done

cleanup

