#!/bin/bash
#
# checkfiles - scan a directory tree and report on filenames that may cause
# trouble if the tree is moved to a cloud-storage service.  Screens for
#   Google Drive
#   Dropbox
#   OneDrive
#   MacOS
#   Linux
#   Windows
#
# usage:  checkfiles [options] dir...
#  (see below for the options)
#
# David Kotz and Richard Brittain, 2019
#

# Get options
linux=0
macos=0
windows=0
onedrive=0
google=0
dropbox=0
Dartfs=0
Warning=0
opts=0
while getopts lmwogdDWA o ; do
   case $o in
   l) linux=1 ; opts=1 ;;
   m) macos=1 ; opts=1 ;;
   w) windows=1 ; opts=1 ;;
   o) onedrive=1 ; opts=1 ;;
   g) google=1 ; opts=1 ;;
   d) dropbox=1 ; opts=1 ;;
   D) Dartfs=1 ; opts=1 ;;
   W) Warning=1 ; opts=1 ;;
   A) # Enable all tests
      linux=1; macos=1; windows=1; onedrive=1; google=1; dropbox=1; Dartfs=1; opts=1 ;;
   esac
done
shift $(( OPTIND - 1))

if [[ "$opts" == "0" ]] ; then
   echo "$0: At least one option of -l,m,w,o,g,d,D must be specified"
   echo "$0: Option -A enables all checks"
   echo "$0: Option -W enables warnings in addition to errors"
   exit 1
fi
# how many directories will we scan?
if [[ $# -lt 1 ]]; then 
    echo "usage: checkfiles [options] dir..."
    exit 1;
fi


# push a list of all folders and files through awk to look for illegal patterns
# (eventually I should allow command-line arguments to set these awk variables)
find "$@" -print \
| gawk -f $0.awk linux=$linux macos=$macos windows=$windows onedrive=$onedrive google=$google dropbox=$dropbox dartfs=$Dartfs warning=$Warning

# exit with the status from awk
exit $?

